### ПЛАН КРАТКИЙ ###
День 3: Строки и списки

Работа со строками: операции, методы
Работа со списками: создание, доступ к элементам, изменение
Взаимодействие со строками и списками
Практическое задание: Создайте список из нескольких имен и выведите каждое имя на отдельной строке.

# !!!! ПРОМТ !!!! #
**** Напиши более детальный план по пунктам для 3 дня изучения python согласно тексту выше ****

### ПЛАН ПОЛНЫЙ ###
День 3: Строки и списки

1 Работа со строками
1.1. Операции со строками
1.1.1. Конкатенация строк (соединение строк)
1.1.2. Умножение строки на число (копирование строки)
1.1.3. Индексация строк (получение отдельных символов строки)
1.2. Методы строк
1.2.1. Строковые методы для изменения регистра (upper, lower, capitalize)
1.2.2. Методы для поиска подстроки (find, index, count  "FIND AND INDEX разобрать подробнее в чем разница?")
1.2.3. Методы для замены подстроки (replace)
1.2.4. Методы для разделения строки (split - "разобрать подробнее")
1.2.5. Методы для удаления лишних символов (strip, lstrip, rstrip)


2 Работа со списками
2.1. Создание списков
2.1.1. Создание пустого списка
2.1.2. Создание списка с заданными элементами
2.2. Доступ к элементам списка
2.2.1. Индексация списков (получение отдельных элементов списка)
2.2.2. Срезы списков (получение подсписка)
2.3. Изменение списков
2.3.1. Добавление элементов в список (append, insert)
2.3.2. Изменение элементов списка
2.3.3. Удаление элементов из списка (remove, pop)
2.4. Взаимодействие со строками и списками
2.4.1. Преобразование строки в список (split)
2.4.2. Преобразование списка в строку (join)

### ПРОМТ ####

#Составь мне документацию по Python3 и темам которые я приведу ниже начиная с пункта 1.
#Документация должна быть простая и понятная новичку в программирование, должны быть примеры, комментарии к примерам, и подробное описание каждого пункта из темы:
#Темы следующие
#Работа со строками
#1.1. Операции со строками
#1.1.1. Конкатенация строк (соединение строк)
#1.1.2. Умножение строки на число (копирование строки)
#1.1.3. Индексация строк (получение отдельных символов строки)
#1.2. Методы строк
#1.2.1. Строковые методы для изменения регистра (upper, lower, capitalize)
#1.2.2. Методы для поиска подстроки (find, index, count)
#1.2.3. Методы для замены подстроки (replace)
#1.2.4. Методы для разделения строки (split)
#1.2.5. Методы для удаления лишних символов (strip, lstrip, rstrip)


Документация: Работа со строками

1.1. Операции со строками

1.1.1. Конкатенация строк (соединение строк)

Операция конкатенации позволяет объединить две или более строк в одну строку.

Пример:

str1 = "Hello"
str2 = " World"
result = str1 + str2
print(result)  # Output: Hello World
Комментарий: В данном примере две строки, "Hello" и " World", объединяются с помощью оператора "+" и результат записывается в переменную "result". Затем, результат выводится на экран.

1.1.2. Умножение строки на число (копирование строки)

Операция умножения строки на число позволяет скопировать строку несколько раз.

Пример:

str1 = "Hi "
result = str1 * 3
print(result)  # Output: Hi Hi Hi
Комментарий: В данном примере строка "Hi " умножается на число 3, что приводит к тому, что строка повторяется 3 раза. Результат выводится на экран.

1.1.3. Индексация строк (получение отдельных символов строки)

Индексация позволяет получать отдельные символы из строки. Индексы начинаются с 0.

Пример:

str1 = "Hello"
print(str1[0])  # Output: H
print(str1[1])  # Output: e
Комментарий: В данном примере строка "Hello" имеет индексы с 0 до 4. Чтобы получить символы строки, указываем соответствующий индекс в квадратных скобках. Результат выводится на экран.

1.2. Методы строк

1.2.1. Строковые методы для изменения регистра (upper, lower, capitalize)

Методы для изменения регистра позволяют преобразовывать строки в различные регистры.

Пример:

str1 = "hello world"
print(str1.upper())  # Output: HELLO WORLD
print(str1.lower())  # Output: hello world
print(str1.capitalize())  # Output: Hello world
Комментарий: В данном примере методы upper(), lower() и capitalize() применяются к строке "hello world".
Метод upper() преобразует все символы строки в верхний регистр, метод lower() - в нижний регистр. Метод capitalize() делает первую букву строки заглавной, а остальные - строчными. Результаты выводятся на экран.

1.2.2. Методы для поиска подстроки (find, index, count)

Методы для поиска подстроки позволяют находить позицию подстроки в строке или определять количество её вхождений.

Пример:

str1 = "Hello world"
print(str1.find("world"))  # Output: 6
print(str1.index("world"))  # Output: 6
print(str1.count("o"))  # Output: 2
Комментарий: В данном примере методы find(), index() и count() применяются к строке "Hello world".
Методы find() и index() ищут позицию первого вхождения подстроки "world" в строке и возвращают индекс этой позиции.
Метод count() подсчитывает количество вхождений символа "o" в строке и возвращает это значение. Результаты выводятся на экран.

Методы find() и index() в Python используются для поиска подстроки в строке. Они похожи, но есть несколько отличий:

Метод find():

Если подстрока найдена, то возвращает индекс (позицию) первого вхождения подстроки в строку.
Если подстрока не найдена, то возвращает -1.
Не вызывает исключение.
Регистрозависимый - различает символы в верхнем и нижнем регистрах.
Пример:

str1 = "Hello world"
print(str1.find("world"))  # Output: 6
print(str1.find("Python"))  # Output: -1
В данном примере, метод find() ищет подстроку "world" в строке "Hello world". Индекс первого вхождения подстроки "world" равен 6, поэтому результатом будет 6. Если бы метод find() не нашёл подстроку "Python" в строке "Hello world", то результатом было бы -1.

Метод index():

Если подстрока найдена, то возвращает индекс (позицию) первого вхождения подстроки в строку.
Если подстрока не найдена, то вызывает исключение ValueError.
Регистрочувствительный - различает символы в верхнем и нижнем регистрах.
Пример:

str1 = "Hello world"
print(str1.index("world"))  # Output: 6
print(str1.index("Python"))  # Raises ValueError: substring not found
В данном примере, метод index() также ищет подстроку "world" в строке "Hello world". Индекс первого вхождения подстроки "world" равен 6, поэтому результатом будет 6. Однако, если метод index() не нашёл подстроку "Python" в строке "Hello world", то вызывается исключение ValueError.

Таким образом, основное отличие между методами find() и index() заключается в том, что find() возвращает -1, если подстрока не найдена, а index() вызывает исключение ValueError.


1.2.3. Методы для замены подстроки (replace)

Метод replace() позволяет заменить одну подстроку на другую в строке.

Пример:

str1 = "Hello world"
new_str = str1.replace("world", "python")
print(new_str)  # Output: Hello python
Комментарий: В данном примере метод replace() применяется к строке "Hello world".
Подстрока "world" заменяется на "python" и результат записывается в новую переменную "new_str". Результат выводится на экран.

1.2.4. Методы для разделения строки (split)

Метод split() позволяет разделить строку на части по заданному разделителю.

Пример:

str1 = "Hello, my name is Edya"
result = str1.split(", ")
print(result)  # Output: ['Hello', 'my name is Edya']
Комментарий: В данном примере метод split() применяется к строке "Hello, my name is Edya".
Строка разделяется на части по разделителю ", " и результат записывается в переменную "result" в виде списка. Результат выводится на экран.
Метод split() в Python используется для разделения строки на подстроки по заданному разделителю. Этот метод возвращает список подстрок.

Синтаксис:

string.split(separator, maxsplit)
Параметры:

separator (необязательный) - разделитель, по которому будет производиться разделение строки. По умолчанию разделителем считается пробел.
maxsplit (необязательный) - максимальное количество разделений. По умолчанию разделение происходит для всех вхождений разделителя.
Примеры:

Разделение строки по пробелу:
str1 = "Hello world"
result = str1.split()
print(result)  # Output: ['Hello', 'world']
В данном примере, метод split() разделяет строку "Hello world" по пробелу и создаёт список из двух подстрок, "Hello" и "world".

Разделение строки по заданному разделителю:
str1 = "apple,banana,cherry"
result = str1.split(",")
print(result)  # Output: ['apple', 'banana', 'cherry']
В данном примере, метод split() разделяет строку "apple,banana,cherry" по запятой и создаёт список из трёх подстрок, 'apple', 'banana' и 'cherry'.

Ограничение количества разделений:
str1 = "apple,banana,cherry,grape"
result = str1.split(",", 2)
print(result)  # Output: ['apple', 'banana', 'cherry,grape']
В данном примере, метод split() разделяет строку "apple,banana,cherry,grape" по запятой и создаёт список из трёх подстрок. Параметр maxsplit равен 2, поэтому разделение происходит только два раза, и все последующие запятые считаются частью одной подстроки.

Разделение строки по символу переноса строки:
str1 = "Hello\nworld"
result = str1.split("\n")
print(result)  # Output: ['Hello', 'world']
В данном примере, метод split() разделяет строку "Hello\nworld" по символу переноса строки ("\n") и создаёт список из двух подстрок, "Hello" и "world".

Разделение строки без указания разделителя (получение списка символов):
str1 = "Hello"
result = list(str1)
print(result)  # Output: ['H', 'e', 'l', 'l', 'o']
В данном примере, строка "Hello" преобразуется в список символов с помощью функции list().

Комментарий: Метод split() полезен при работе с текстовыми данными, когда необходимо разделить строку на составные части или извлечь интересующую информацию. Например, можно использовать его для обработки CSV-файлов или разбивки текста на отдельные слова.


1.2.5. Методы для удаления лишних символов (strip, lstrip, rstrip)

Методы strip(), lstrip() и rstrip() позволяют удалить лишние символы в начале и конце строки.

Пример:

str1 = "   Hello   "
print(str1.strip())  # Output: "Hello"
print(str1.lstrip())  # Output: "Hello   "
print(str1.rstrip())  # Output: "   Hello"
Комментарий: В данном примере методы strip(), lstrip() и rstrip() применяются к строке " Hello ".
Метод strip() удаляет все пробелы в начале и в конце строки, lstrip() - только в начале, rstrip() - только в конце. Результаты выводятся на экран.

Это была документация по работе со строками в Python. В следующих разделах будет рассмотрена работа со списками. Если у вас возникнут вопросы, смело обращайтесь ко мне!

### ПРОМТ ###
Составь мне документацию по Python3 и темам которые я приведу ниже начиная с пункта 2.
Документация должна быть простая и понятная новичку в программирование с примерами и комментариями к теме, если будут сложные вещи для понимания приведи более подробное описание, если будут методы которые делают одно и тоже напиши различие в этих методах с описанием и комментариями, должны быть примеры, комментарии к примерам, и подробное описание каждого пункта из темы:
Работа со списками
2.1. Создание списков
2.1.1. Создание пустого списка
2.1.2. Создание списка с заданными элементами
2.2. Доступ к элементам списка
2.2.1. Индексация списков (получение отдельных элементов списка)
2.2.2. Срезы списков (получение подсписка)
2.3. Изменение списков
2.3.1. Добавление элементов в список (append, insert)
2.3.2. Изменение элементов списка
2.3.3. Удаление элементов из списка (remove, pop)
2.4. Взаимодействие со строками и списками
2.4.1. Преобразование строки в список (split)
2.4.2. Преобразование списка в строку (join)

Документация по работе со списками в Python 3

Список - это упорядоченная коллекция элементов, которая может содержать объекты разных типов. В отличие от строк, списки в Python являются изменяемыми объектами.

2.1. Создание списков

2.1.1. Создание пустого списка:

my_list = []
2.1.2. Создание списка с заданными элементами:

my_list = [1, 2, 3, 'apple', 'banana']
2.2. Доступ к элементам списка

2.2.1. Индексация списков (получение отдельных элементов списка)

Индексация в Python начинается с 0. Чтобы получить доступ к элементу списка, используйте оператор квадратных скобок с указанием индекса.

my_list = ['apple', 'banana', 'cherry']
print(my_list[0])  # Output: 'apple'
print(my_list[2])  # Output: 'cherry'
2.2.2. Срезы списков (получение подсписка):

Срез позволяет получить подсписок из списка. Синтаксис: [начальный индекс : конечный индекс].

my_list = ['apple', 'banana', 'cherry', 'date']
print(my_list[1:3])  # Output: ['banana', 'cherry']
2.3. Изменение списков

2.3.1. Добавление элементов в список

В Python существует два основных способа добавления элементов в список:

Метод append() добавляет элемент в конец списка.
my_list = ['apple', 'banana', 'cherry']
my_list.append('date')
print(my_list)  # Output: ['apple', 'banana', 'cherry', 'date']
Метод insert() добавляет элемент на заданную позицию в списке.
my_list = ['apple', 'banana', 'cherry']
my_list.insert(1, 'date')
print(my_list)  # Output: ['apple', 'date', 'banana', 'cherry']
2.3.2. Изменение элементов списка

Чтобы изменить элемент списка, присвойте новое значение по индексу элемента.

my_list = ['apple', 'banana', 'cherry']
my_list[1] = 'date'
print(my_list)  # Output: ['apple', 'date', 'cherry']
2.3.3. Удаление элементов из списка

В Python также существует два основных метода удаления элементов из списка:

Метод remove() удаляет первое вхождение указанного элемента.
my_list = ['apple', 'banana', 'cherry']
my_list.remove('banana')
print(my_list)  # Output: ['apple', 'cherry']
Метод pop() удаляет элемент на заданной позиции и возвращает его значение.
my_list = ['apple', 'banana', 'cherry']
popped_item = my_list.pop(1)
print(popped_item)  # Output: 'banana'
print(my_list)  # Output: ['apple', 'cherry']
2.4. Взаимодействие со строками и списками

2.4.1. Преобразование строки в список (split)

Метод split() разделяет строку на подстроки по заданному разделителю и возвращает список подстрок.

my_string = "apple,banana,cherry"
my_list = my_string.split(",")
print(my_list)  # Output: ['apple', 'banana', 'cherry']
2.4.2. Преобразование списка в строку (join)

Метод join() объединяет элементы списка в одну строку, вставляя между ними заданный разделитель.

my_list = ['apple', 'banana', 'cherry']
my_string = ",".join(my_list)
print(my_string)  # Output: 'apple,banana,cherry'
Это основные методы и операции, которые помогут вам работать со списками в Python. Помните, что списки можно изменять, добавлять, изменять и удалять элементы. Используйте описанные методы для работы с вашими данными в списке.


Практическое задание:
3.1. Создание списка из нескольких имен
3.2. Вывод каждого имени на отдельной строке

Дополнительные задания (по желанию):
4.1. Реализовать функцию, которая принимает строковый аргумент и возвращает список всех слов в строке
4.2. Реализовать функцию, которая принимает список и возвращает новый список, содержащий только уникальные элементы исходного списка
4.3. Реализовать функцию, которая принимает список и выводит на экран количество повторяющихся элементов в списке

Повторение и закрепление пройденного материала
5.1. Примеры задач и упражнений для работы со строками и списками
5.2. Практические задания для самостоятельного решения
