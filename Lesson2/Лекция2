; День 2: Условные операторы и циклы

; Условные операторы if, elif, else
; Циклы while и for
; Работа с операторами continue и break
; Практическое задание: Напишите программу, которая проверяет, является ли введенное число четным или нечетным.

; Опиши подробнее второй день по пунктам, что конкретно нужно изучить, на что необходимо обратить внимание



1. Условные операторы if, elif, else:
- Узнайте, как использовать оператор if для выполнения определенного блока кода, если условие истинно. ( Промт написан, тема изучена)
- Изучите, как добавить условия elif (сокращение от "else if"), чтобы проверить несколько условий последовательно ( Промт написан, тема изучена)
- Познакомьтесь с оператором else, который выполняется, когда все предыдущие условия ложны. ( Промт написан, тема изучена)

2. Циклы while и for:
- Узнайте, как использовать цикл while для выполнения блока кода, пока условие истинно. ( Промт написан, тема изучена)
- Изучите цикл for, который позволяет перебрать элементы последовательности и выполнить для каждого элемента определенные действия. ( Промт написан, тема изучена)

3. Работа с операторами continue и break :
- Изучите оператор continue, который позволяет прервать текущую итерацию цикла и перейти к следующей. ( Промт написан, тема изучена)
- Узнайте о операторе break, который позволяет полностью прервать выполнение цикла и перейти к следующим инструкциям после цикла. ( Промт написан, тема изучена)

4.Практическое задание:
Напишите программу, которая просит пользователя ввести число.
Используйте условный оператор if, чтобы проверить, является ли число четным или нечетным.
Выведите на экран соответствующее сообщение, указывающее, является ли число четным или нечетным.




# !!! ПРОМТ_ТЕМА #1 !!! #

Опиши подробно тему Условные операторы if, elif, else . для полного новичка в программирование и Python 3, с максимально подробным описанием темы и примерами, так же комментариями к примерам


Без проблем! Для полного новичка в программировании и Python 3, вот подробное описание условных операторов if, elif и else:

Условные операторы if, elif и else используются для выполнения определенных действий в зависимости от значения условия. Они позволяют вам написать код, который решает проблему сразу для нескольких возможных вариантов.

Условный оператор if:
Оператор if проверяет, является ли условие истинным. Если условие выполняется, то код внутри блока if будет выполнен.
Структура оператора if выглядит так:
if условие:
    # выполнить действия, если условие истинно
Пример:

x = 10

if x > 5:
    print("x больше 5")
В этом примере, если значение переменной x больше 5, будет напечатано сообщение "x больше 5".

Условный оператор elif:
Оператор elif позволяет проверить несколько условий последовательно. Он выполняется только в том случае, если все предыдущие условия ложны, и текущее условие истинно.
Структура оператора elif выглядит так:
if условие1:
    # выполнить действия, если условие1 истинно
elif условие2:
    # выполнить действия, если условие2 истинно
Пример:

x = 7

if x > 10:
    print("x больше 10")
elif x > 5:
    print("x больше 5, но меньше или равно 10")
В этом примере, если значение переменной x больше 10, будет напечатано сообщение "x больше 10". Если значение переменной x больше 5, но меньше или равно 10, будет напечатано сообщение "x больше 5, но меньше или равно 10".

Условный оператор else:
Оператор else выполняется, когда все предыдущие условия ложны. Он может быть добавлен в конце блока if или блока elif и позволяет выполнить действия, когда ни одно из предыдущих условий не выполняется.
Структура оператора else выглядит так:
if условие1:
    # выполнить действия, если условие1 истинно
elif условие2:
    # выполнить действия, если условие2 истинно
else:
    # выполнить действия, если ни одно из предыдущих условий не выполняется
Пример:

x = 3

if x > 10:
    print("x больше 10")
elif x > 5:
    print("x больше 5, но меньше или равно 10")
else:
    print("x меньше или равно 5")
В этом примере, если значение переменной x больше 10, будет напечатано сообщение "x больше 10". Если значение переменной x больше 5, но меньше или равно 10, будет напечатано сообщение "x больше 5, но меньше или равно 10". В противном случае, если значение переменной x меньше или равно 5, будет напечатано сообщение "x меньше или равно 5".



# !!! ПРОМТ_ТЕМА #2 !!! #
Опиши подробно тему Циклы while и for . для полного новичка в программирование и Python 3, с максимально подробным описанием темы и примерами, так же комментариями к примерам

Конечно! Для полного новичка в программировании и Python 3, вот подробное описание циклов while и for:

Циклы позволяют вам выполнять блок кода несколько раз. В Python 3 есть два вида циклов: while и for.

Цикл while:
Цикл while выполняет блок кода, пока условие остается истинным. Когда условие становится ложным, цикл прекращается и выполнение программы продолжается со следующей инструкции после цикла.
Структура цикла while выглядит так:

while условие:
    # выполнять действия, пока условие истинно

    # (важно: убедитесь, что внутри цикла есть код для изменения условия,
    # иначе цикл будет выполняться бесконечно)
Пример:

x = 0

while x < 5:
    print(x)
    x += 1
В этом примере, пока значение переменной x меньше 5, будет выполняться блок кода внутри цикла. Затем значение x будет увеличиваться на 1 с помощью оператора +=, чтобы в конечном итоге цикл завершился.

Цикл for:
Цикл for позволяет вам перебирать элементы последовательности (например, список или строку) и выполнять определенные действия для каждого элемента. Этот вид цикла особенно удобен, когда вы знаете точное количество итераций.
Структура цикла for выглядит так:

for элемент in последовательность:
    # выполнить действия для каждого элемента
Пример:

fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)
В этом примере каждый элемент списка fruits будет присваиваться переменной fruit, и для каждого элемента будет выполняться блок кода внутри цикла. На каждой итерации цикла будет напечатано значение fruit.

Теперь ты знаком с циклами while и for в Python 3. Используй их в своих программах, чтобы повторять действия и обрабатывать элементы последовательности! Если у тебя возникнут вопросы или понадобится дополнительная помощь, не стесняйся обращаться.

# !!! ПРОМТ_ТЕМА_#3 !!! #
Опиши подробно тему Работа с операторами continue и break . для полного новичка в программирование и Python 3, с максимально подробным описанием темы и примерами, так же комментариями к примерам


Конечно! Для полного новичка в программировании и Python 3, вот подробное описание работы с операторами continue и break:

Оператор continue:
Оператор continue используется внутри цикла для прерывания текущей итерации и перехода к следующей итерации, минуя оставшуюся часть блока кода внутри цикла. Он полезен, когда вам нужно пропустить выполнение определенных действий в цикле для определенных условий.
Пример:

for i in range(1, 6):
    if i == 3:
        continue
    print(i)
В этом примере, когда значение переменной i равно 3, оператор continue прерывает текущую итерацию и переходит к следующей. Таким образом, на итерации с i = 3 будет пропущено выполнение команды print(i) и будет продолжено с i = 4.

Оператор break:
Оператор break используется внутри цикла для полного прекращения выполнения цикла и выхода из него немедленно. Он полезен, когда вам нужно остановить выполнение цикла на определенном условии, даже если условие истинно.
Пример:

fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    if fruit == "banana":
        break
    print(fruit)
В этом примере, когда значение fruit равно "banana", оператор break прекращает выполнение цикла for и выходит из него. Таким образом, на итерации с fruit равным "banana" выводится только "apple", а затем выполнение цикла завершается.

Работа с операторами continue и break позволяет указать особые условия в цикле и контролировать его выполнение. Используй их по необходимости в своих программах, чтобы эффективно управлять итерациями цикла! Если у тебя возникнут вопросы или понадобится дополнительная помощь, не стесняйся обращаться.